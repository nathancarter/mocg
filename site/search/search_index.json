{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"You can buy the ebook online. Welcome \u00b6 This website is for the textbook Introduction to the Mathematics of Computer Graphics , published by the Mathematical Association of America. It has links and resources for readers, both students and instructors. I aim for it to evolve and improve for the foreseeable future. See content links to the left. News \u00b6 The textbook has won the 2021 Beckenback Book Prize! Thanks to the MAA and all who contributed to the text. See full details and acknowledgements here. Online exercises \u00b6 Over 180 exercises related to the text exist in the WeBWorK Open Problem Library. You can read about the library here , but to be able to browse it, you'll need a WeBWorK installation, as documented on that page. The source code for the mathematics of computer graphics exercises can be found here .","title":"Introduction to the Mathematics of Computer Graphics"},{"location":"#welcome","text":"This website is for the textbook Introduction to the Mathematics of Computer Graphics , published by the Mathematical Association of America. It has links and resources for readers, both students and instructors. I aim for it to evolve and improve for the foreseeable future. See content links to the left.","title":"Welcome"},{"location":"#news","text":"The textbook has won the 2021 Beckenback Book Prize! Thanks to the MAA and all who contributed to the text. See full details and acknowledgements here.","title":"News"},{"location":"#online-exercises","text":"Over 180 exercises related to the text exist in the WeBWorK Open Problem Library. You can read about the library here , but to be able to browse it, you'll need a WeBWorK installation, as documented on that page. The source code for the mathematics of computer graphics exercises can be found here .","title":"Online exercises"},{"location":"chapter-1-resources/","text":"This page contains links to all resources mentioned in Chapter 1 of the textbook. There is currently only one. The POV-Ray Hall of Fame \u00b6 This site is mentioned at the end of the chapter when the photorealistic image Glasses by Gilles Tran is held up as an example of realistic raytracing.","title":"Chapter 1. Introduction to Computer Graphics"},{"location":"chapter-1-resources/#the-pov-ray-hall-of-fame","text":"This site is mentioned at the end of the chapter when the photorealistic image Glasses by Gilles Tran is held up as an example of realistic raytracing.","title":"The POV-Ray Hall of Fame"},{"location":"chapter-10-resources/","text":"This page contains links to all resources mentioned in Chapter 10 of the textbook. It begins with several ways to graph vector functions for free on the web, and concludes with how to graph them within POV-Ray scenes. I recommend them in the order shown; GeoGebra is the best. The two that follow it require Java, but do create interactive plots. The final one does not require Java, but creates only a static image. GeoGebra \u00b6 GeoGebra (named for \"geometry\" and \"algebra\" together) is a very powerful tool and is free to use online. Follow the link above to its 3D graphing tool, and just type in a function, such as f(t)=(3t,2t+1,sin(6t)) to graph it. GeoGebra automatically converts this to its own internal code for you, which looks like the following, and lets you specify the lower and upper bounds on the variable t t . f = Curve((3t,2t+1,sin(6t)),t,-10,10) You can type such code in directly, with or without the f = , if you prefer. You can also use GeoGebra to graph 2D parametric plots . CalcPlot3D \u00b6 A useful tool for graphing vector functions and other kinds of 3D objects. Although this applet was created for use in calculus classes, it is useful to us as well. Use the following procedure to graph a vector function in CalcPlot3D. Erase the default shape that appears, by unchecking the box next to Function 1 and clicking the Graph button immediately above it. Add a parametric curve by clicking the Graph menu and choosing Add a Space Curve. In the three blanks provided, enter the x x , y y , and z z components of the vector function, using t t as the parameter. The default bounds for t t (from -10 -10 to 10 10 ) may be sensible for your function, but you can change them. Click Graph (on the popup window into which you typed the parametric equations). Click and drag to view from different angles. Sage \u00b6 A powerful mathematics tool that you can use on your own computer or on the web. Here is a link to a webpage that evaluates Sage code and shows you the result immediately. Type in code like the following to graph a vector function. (Replace the three components of the vector function with any three vector function components.) The 0 0 and 2\\pi 2\\pi are the bounds on t t . var ( 't' ) parametric_plot3d ([ cos ( t ), sin ( t ), t ],( 0 , 2 * pi )) To see that example plotted, click here . Wolfram|Alpha \u00b6 Like Sage, this online math tool does far more than just graphing vector functions, but we can use it for that, too. In the input box, type input like the following. parametric plot (t*cos t, t*sin t,t), t=0..6pi To see that example plotted, click here . Graphing vector functions in POV \u00b6 Download this file by clicking vector-functions.inc . Instructions for using it appear in the textbook, and you can download vector-demo.pov to see how I have used it in a demo. Review of Derivatives \u00b6 If it's been awhile since you've had differential calculus (what many colleges call \"Calculus I\") then here are some online review resources available to you. There are a great many, and this is just a selection. Reference sheets Derivative rules only (top half of the page) Derivative rules and related strategies (only portions of the first page or two are relevant for our study) Selected video lectures from Khan Academy The power rule Trigonometry, exponentials, and logarithms The product rule The quotient rule The chain rule","title":"Chapter 10. Vector Functions"},{"location":"chapter-10-resources/#geogebra","text":"GeoGebra (named for \"geometry\" and \"algebra\" together) is a very powerful tool and is free to use online. Follow the link above to its 3D graphing tool, and just type in a function, such as f(t)=(3t,2t+1,sin(6t)) to graph it. GeoGebra automatically converts this to its own internal code for you, which looks like the following, and lets you specify the lower and upper bounds on the variable t t . f = Curve((3t,2t+1,sin(6t)),t,-10,10) You can type such code in directly, with or without the f = , if you prefer. You can also use GeoGebra to graph 2D parametric plots .","title":"GeoGebra"},{"location":"chapter-10-resources/#calcplot3d","text":"A useful tool for graphing vector functions and other kinds of 3D objects. Although this applet was created for use in calculus classes, it is useful to us as well. Use the following procedure to graph a vector function in CalcPlot3D. Erase the default shape that appears, by unchecking the box next to Function 1 and clicking the Graph button immediately above it. Add a parametric curve by clicking the Graph menu and choosing Add a Space Curve. In the three blanks provided, enter the x x , y y , and z z components of the vector function, using t t as the parameter. The default bounds for t t (from -10 -10 to 10 10 ) may be sensible for your function, but you can change them. Click Graph (on the popup window into which you typed the parametric equations). Click and drag to view from different angles.","title":"CalcPlot3D"},{"location":"chapter-10-resources/#sage","text":"A powerful mathematics tool that you can use on your own computer or on the web. Here is a link to a webpage that evaluates Sage code and shows you the result immediately. Type in code like the following to graph a vector function. (Replace the three components of the vector function with any three vector function components.) The 0 0 and 2\\pi 2\\pi are the bounds on t t . var ( 't' ) parametric_plot3d ([ cos ( t ), sin ( t ), t ],( 0 , 2 * pi )) To see that example plotted, click here .","title":"Sage"},{"location":"chapter-10-resources/#wolframalpha","text":"Like Sage, this online math tool does far more than just graphing vector functions, but we can use it for that, too. In the input box, type input like the following. parametric plot (t*cos t, t*sin t,t), t=0..6pi To see that example plotted, click here .","title":"Wolfram|Alpha"},{"location":"chapter-10-resources/#graphing-vector-functions-in-pov","text":"Download this file by clicking vector-functions.inc . Instructions for using it appear in the textbook, and you can download vector-demo.pov to see how I have used it in a demo.","title":"Graphing vector functions in POV"},{"location":"chapter-10-resources/#review-of-derivatives","text":"If it's been awhile since you've had differential calculus (what many colleges call \"Calculus I\") then here are some online review resources available to you. There are a great many, and this is just a selection. Reference sheets Derivative rules only (top half of the page) Derivative rules and related strategies (only portions of the first page or two are relevant for our study) Selected video lectures from Khan Academy The power rule Trigonometry, exponentials, and logarithms The product rule The quotient rule The chain rule","title":"Review of Derivatives"},{"location":"chapter-11-resources/","text":"This page contains links to all resources mentioned in Chapter 11 of the textbook. B\u00e9zier curve simplifier \u00b6 Use this online tool to enter your control points and have it create a simple vector function formula for a cubic B\u00e9zier curve. (The top of that page shows the code that the page is using to do the work; scroll down to where it asks you for your input.) Interactive cubic B\u00e9zier curves \u00b6 Try this interactive website for cubic B\u00e9zier curves in two dimensions. It allows you to move anywhere in on the page the four control points, and it shows the corresponding function P(t) P(t) built using the formula given in this chapter of the textbook. You can see how the control points determine the curve as you drag them around. Car-and-track scene \u00b6 You can download the .pov scene file containing the car and track , for use in exercises that ask you to modify it. Explosion Example \u00b6 This shows what it could look like to apply to the sphere in the POV basic scene the explosion macro you are asked to build in one of this chapter's advanced programming exercises.","title":"Chapter 11. B\u00e9zeir Curves"},{"location":"chapter-11-resources/#bezier-curve-simplifier","text":"Use this online tool to enter your control points and have it create a simple vector function formula for a cubic B\u00e9zier curve. (The top of that page shows the code that the page is using to do the work; scroll down to where it asks you for your input.)","title":"B\u00e9zier curve simplifier"},{"location":"chapter-11-resources/#interactive-cubic-bezier-curves","text":"Try this interactive website for cubic B\u00e9zier curves in two dimensions. It allows you to move anywhere in on the page the four control points, and it shows the corresponding function P(t) P(t) built using the formula given in this chapter of the textbook. You can see how the control points determine the curve as you drag them around.","title":"Interactive cubic B\u00e9zier curves"},{"location":"chapter-11-resources/#car-and-track-scene","text":"You can download the .pov scene file containing the car and track , for use in exercises that ask you to modify it.","title":"Car-and-track scene"},{"location":"chapter-11-resources/#explosion-example","text":"This shows what it could look like to apply to the sphere in the POV basic scene the explosion macro you are asked to build in one of this chapter's advanced programming exercises.","title":"Explosion Example"},{"location":"chapter-12-resources/","text":"This page contains links to all resources mentioned in Chapter 12 of the textbook. In addition to the resources listed below, some resources from Chapter 11 remain relevant . Interactive quadratic B\u00e9zier curve page \u00b6 On the Chapter 11 page , I included a link to a page where you could play with cubic B\u00e9zier curves . Now that Chapter 12 has introduced the whole family of B\u00e9zier curves of different degrees, you may also be interested in the corresponding quadratic page . The de Casteljau Algorithm Applet \u00b6 The de Casteljau algorithm is the iterative construction of higher-degree B\u00e9zier curves from compositions of linear interpolations. An interactive animation of that algorithm is available here. Animated figures from the text \u00b6","title":"Chapter 12. Bernstein Polynomials"},{"location":"chapter-12-resources/#interactive-quadratic-bezier-curve-page","text":"On the Chapter 11 page , I included a link to a page where you could play with cubic B\u00e9zier curves . Now that Chapter 12 has introduced the whole family of B\u00e9zier curves of different degrees, you may also be interested in the corresponding quadratic page .","title":"Interactive quadratic B\u00e9zier curve page"},{"location":"chapter-12-resources/#the-de-casteljau-algorithm-applet","text":"The de Casteljau algorithm is the iterative construction of higher-degree B\u00e9zier curves from compositions of linear interpolations. An interactive animation of that algorithm is available here.","title":"The de Casteljau Algorithm Applet"},{"location":"chapter-12-resources/#animated-figures-from-the-text","text":"","title":"Animated figures from the text"},{"location":"chapter-13-resources/","text":"This page contains links to all resources mentioned in Chapter 13 of the textbook. High-speed videos of collisions \u00b6 To see ultra-slow-motion videos of objects colliding, consider the links below. These demonstrate that, although changes in velocity may seem instantaneous when we watch them at normal speed with the naked eye, they are nonetheless continuous changes in velocity when they are slowed down. A baseball hitting a bat at 140 mph (YouTube video from Washington State University's Sports Science Lab) What happens when ball meets bat? (web page with videos, by Daniel Russell, professor at Pennsylvania State University) Animated video explaining the three levels of continuity \u00b6 Illustrates the three levels of continuity discussed in the chapter, with a car moving along various paths of motion to illustrate what each type of continuity feels like to watch in a movie. The car object in that video \u00b6 If you plan to do the exercise in the text that asks you to create a video like the one above, you may be interested in having the automobile model on which it was based. It was created by Friedrich Lohm\u00fceller, and is available on this page .","title":"Chapter 13. Continuity and B\u00e9zier Curves"},{"location":"chapter-13-resources/#high-speed-videos-of-collisions","text":"To see ultra-slow-motion videos of objects colliding, consider the links below. These demonstrate that, although changes in velocity may seem instantaneous when we watch them at normal speed with the naked eye, they are nonetheless continuous changes in velocity when they are slowed down. A baseball hitting a bat at 140 mph (YouTube video from Washington State University's Sports Science Lab) What happens when ball meets bat? (web page with videos, by Daniel Russell, professor at Pennsylvania State University)","title":"High-speed videos of collisions"},{"location":"chapter-13-resources/#animated-video-explaining-the-three-levels-of-continuity","text":"Illustrates the three levels of continuity discussed in the chapter, with a car moving along various paths of motion to illustrate what each type of continuity feels like to watch in a movie.","title":"Animated video explaining the three levels of continuity"},{"location":"chapter-13-resources/#the-car-object-in-that-video","text":"If you plan to do the exercise in the text that asks you to create a video like the one above, you may be interested in having the automobile model on which it was based. It was created by Friedrich Lohm\u00fceller, and is available on this page .","title":"The car object in that video"},{"location":"chapter-14-resources/","text":"This page contains links to all resources mentioned in Chapter 14 of the textbook. Waving Flag \u00b6 A simulation of a waving flag using a cubic B\u00e9zier surface whose control net points are animated. Wobbling liquid \u00b6 A simulation of liquid in a rectangular container using an 8 th -degree (in both directions) B\u00e9zier surface whose control net points are animated.","title":"Chapter 14. B\u00e9zier Surfaces"},{"location":"chapter-14-resources/#waving-flag","text":"A simulation of a waving flag using a cubic B\u00e9zier surface whose control net points are animated.","title":"Waving Flag"},{"location":"chapter-14-resources/#wobbling-liquid","text":"A simulation of liquid in a rectangular container using an 8 th -degree (in both directions) B\u00e9zier surface whose control net points are animated.","title":"Wobbling liquid"},{"location":"chapter-15-resources/","text":"This page contains links to all resources mentioned in Chapter 15 of the textbook. Ocean animations in Blender \u00b6 The ocean simulation covered in this video is a large, complex mesh with subdivision applied.","title":"Chapter 15. Subdivision Surfaces"},{"location":"chapter-15-resources/#ocean-animations-in-blender","text":"The ocean simulation covered in this video is a large, complex mesh with subdivision applied.","title":"Ocean animations in Blender"},{"location":"chapter-2-resources/","text":"This page contains links to all resources mentioned in Chapter 2 of the textbook. Practice Problems \u00b6 Tip I highly recommend the practice problems on vectors contained at the Learning Lesson website . Many of them are about three-dimensional vectors, and thus only apply after you have read Chapter 4, but some of them are applicable now. Interactive Experiences \u00b6 Check out the following GeoGebraTube interactive demos to experience point and vector operations in 2D with your own mouse (or finger, on most tablet devices). Addition of two vectors Addition of two vectors with components shown Addition of a point and a vector (created by Kevin Liu, a student at Bentley University, for this website) Subtraction of two vectors, or two points (created by Kevin Liu, a student at Bentley University, for this website) Multiplication of a scalar by a vector Unit vectors Converting a vector into its magnitude and direction, separately (created by Kevin Liu, a student at Bentley University, for this website) Converting a separate magnitude and direction into a vector (created by Kevin Liu, a student at Bentley University, for this website)","title":"Chapter 2. Two-dimensional Space"},{"location":"chapter-2-resources/#practice-problems","text":"Tip I highly recommend the practice problems on vectors contained at the Learning Lesson website . Many of them are about three-dimensional vectors, and thus only apply after you have read Chapter 4, but some of them are applicable now.","title":"Practice Problems"},{"location":"chapter-2-resources/#interactive-experiences","text":"Check out the following GeoGebraTube interactive demos to experience point and vector operations in 2D with your own mouse (or finger, on most tablet devices). Addition of two vectors Addition of two vectors with components shown Addition of a point and a vector (created by Kevin Liu, a student at Bentley University, for this website) Subtraction of two vectors, or two points (created by Kevin Liu, a student at Bentley University, for this website) Multiplication of a scalar by a vector Unit vectors Converting a vector into its magnitude and direction, separately (created by Kevin Liu, a student at Bentley University, for this website) Converting a separate magnitude and direction into a vector (created by Kevin Liu, a student at Bentley University, for this website)","title":"Interactive Experiences"},{"location":"chapter-3-resources/","text":"This page contains links to all resources mentioned in Chapter 3 of the textbook. Bouncing ball movie \u00b6 Shows the value of scalings for deforming an object. At the moment of the bounce, the ball is briefly deformed to be flatter and wider, as balls do when they bounce. This simple animation was created with POV-Ray, the raytracing engine used for projects in the textbook. An interactive webpage on 2D Affine Transformations \u00b6 This web page was created by the textbook author to correspond to several exercises in the chapter, most notably those involving scene construction and the runner, cap, and ball shapes. Warning It has been tested on Google Chrome and Mozilla Firefox browsers, but not others. In particular, no guarantee is made that it will function on Microsoft Internet Explorer. Glyphic Technologies' Affine Transformations Applet \u00b6 A Java applet for experimenting with 2D affine transformations Warning Its rotations are clockwise, whereas I use the much more common convention that rotations are counterclockwise. So R_{30^\\circ} R_{30^\\circ} can be done in the applet by using -30^\\circ -30^\\circ instead. Its y y -axis is upside-down. This is common in computer applications, but the textbook uses the mathematical convention you're probably familiar with from middle school. For us, the positive y y axis points up. So to see T_{4,5} T_{4,5} in the applet, you would have to use T_{4,-5} T_{4,-5} instead. Its units are very small. T_{4,5} T_{4,5} will not move the object very much at all. Something more like T_{40,50} T_{40,50} will be clearly visible. Brown University Exploratories' Transformation Game \u00b6 Another Java applet that turns affine transformations into a puzzle game How to play: Try to transform the house at the origin onto the darker copy. Drag a red transformation block from the right down to the backwards pacman beneath the affine plane. After doing so, click and drag on the house to manipulate the parameter. E.g., place a translation, then drag to show how much to translate and in what direction. Or place a rotation, then drag to show how much to rotate. In this game, translations are either in x x or in y y but not both.","title":"Chapter 3. Affine Transformations"},{"location":"chapter-3-resources/#bouncing-ball-movie","text":"Shows the value of scalings for deforming an object. At the moment of the bounce, the ball is briefly deformed to be flatter and wider, as balls do when they bounce. This simple animation was created with POV-Ray, the raytracing engine used for projects in the textbook.","title":"Bouncing ball movie"},{"location":"chapter-3-resources/#an-interactive-webpage-on-2d-affine-transformations","text":"This web page was created by the textbook author to correspond to several exercises in the chapter, most notably those involving scene construction and the runner, cap, and ball shapes. Warning It has been tested on Google Chrome and Mozilla Firefox browsers, but not others. In particular, no guarantee is made that it will function on Microsoft Internet Explorer.","title":"An interactive webpage on 2D Affine Transformations"},{"location":"chapter-3-resources/#glyphic-technologies-affine-transformations-applet","text":"A Java applet for experimenting with 2D affine transformations Warning Its rotations are clockwise, whereas I use the much more common convention that rotations are counterclockwise. So R_{30^\\circ} R_{30^\\circ} can be done in the applet by using -30^\\circ -30^\\circ instead. Its y y -axis is upside-down. This is common in computer applications, but the textbook uses the mathematical convention you're probably familiar with from middle school. For us, the positive y y axis points up. So to see T_{4,5} T_{4,5} in the applet, you would have to use T_{4,-5} T_{4,-5} instead. Its units are very small. T_{4,5} T_{4,5} will not move the object very much at all. Something more like T_{40,50} T_{40,50} will be clearly visible.","title":"Glyphic Technologies' Affine Transformations Applet"},{"location":"chapter-3-resources/#brown-university-exploratories-transformation-game","text":"Another Java applet that turns affine transformations into a puzzle game How to play: Try to transform the house at the origin onto the darker copy. Drag a red transformation block from the right down to the backwards pacman beneath the affine plane. After doing so, click and drag on the house to manipulate the parameter. E.g., place a translation, then drag to show how much to translate and in what direction. Or place a rotation, then drag to show how much to rotate. In this game, translations are either in x x or in y y but not both.","title":"Brown University Exploratories' Transformation Game"},{"location":"chapter-4-resources/","text":"This page contains links to all resources mentioned in Chapter 4 of the textbook. Practice Problems \u00b6 Tip I highly recommend the practice problems on vectors contained at the Learning Lesson website . I mentioned these same problems in Chapter 2, but only some were applicable then, because you had not yet learned about three dimensional space. Now, all such problems are good practice. POV File of Three Keys Scene \u00b6 Download the file three-keys.pov here. This will render the scene shown in the text, and the source can be inspected to see how it was created. Frank Hanish's 3D Transformations Applet \u00b6 A Java applet for experimenting with 3D affine transformations Warning Feel free to ignore the grid of numbers on the bottom of that page until you reach Chapter 5 in the textbook. I still should add here a tutorial on this applet. It is nontrivial, because it requires understanding a stack of matrices onto which you push values. Page of 3D Axes (PDF) \u00b6 For doing the homework for this chapter, you will need to draw some objects in three-dimensional coordinate systems. Rather than make you draw them yourself, this page will save you time and help keep your work neat. Animations of 3D Affine Transformations \u00b6 Translation of a wedge-shaped object by \\langle 3,2,-3\\rangle \\langle 3,2,-3\\rangle , T_{3,2,-3} T_{3,2,-3} \u00b6 Scaling the same object by factors of \u00bd, \u00bd, and 3, in x x , y y , and z z , respectively, S_{1/2,1/2,3} S_{1/2,1/2,3} \u00b6 Reflecting the same object through the yz yz plane, F F \u00b6 Rotation of the same object by -65^\\circ -65^\\circ around the x x axis, R_{-65^\\circ,0,0} R_{-65^\\circ,0,0} \u00b6 Rotation of the same object by 45^\\circ 45^\\circ around the y y axis, R_{0,45^\\circ,0} R_{0,45^\\circ,0} \u00b6 Rotation of the same object by 60^\\circ 60^\\circ around the z z axis, R_{0,0,60^\\circ} R_{0,0,60^\\circ} \u00b6 Combination of several transformations applied to the same object in sequence, T_{-2,0,0}R_{0,0,60^\\circ}S_{1/3,1/3,1/3} T_{-2,0,0}R_{0,0,60^\\circ}S_{1/3,1/3,1/3} \u00b6","title":"Chapter 4. Three Dimensions"},{"location":"chapter-4-resources/#practice-problems","text":"Tip I highly recommend the practice problems on vectors contained at the Learning Lesson website . I mentioned these same problems in Chapter 2, but only some were applicable then, because you had not yet learned about three dimensional space. Now, all such problems are good practice.","title":"Practice Problems"},{"location":"chapter-4-resources/#pov-file-of-three-keys-scene","text":"Download the file three-keys.pov here. This will render the scene shown in the text, and the source can be inspected to see how it was created.","title":"POV File of Three Keys Scene"},{"location":"chapter-4-resources/#frank-hanishs-3d-transformations-applet","text":"A Java applet for experimenting with 3D affine transformations Warning Feel free to ignore the grid of numbers on the bottom of that page until you reach Chapter 5 in the textbook. I still should add here a tutorial on this applet. It is nontrivial, because it requires understanding a stack of matrices onto which you push values.","title":"Frank Hanish's 3D Transformations Applet"},{"location":"chapter-4-resources/#page-of-3d-axes-pdf","text":"For doing the homework for this chapter, you will need to draw some objects in three-dimensional coordinate systems. Rather than make you draw them yourself, this page will save you time and help keep your work neat.","title":"Page of 3D Axes (PDF)"},{"location":"chapter-4-resources/#animations-of-3d-affine-transformations","text":"","title":"Animations of 3D Affine Transformations"},{"location":"chapter-4-resources/#translation-of-a-wedge-shaped-object-by-langle-32-3ranglelangle-32-3rangle-t_32-3t_32-3","text":"","title":"Translation\u00a0of a wedge-shaped object by \\langle 3,2,-3\\rangle\\langle 3,2,-3\\rangle,\u00a0T_{3,2,-3}T_{3,2,-3}"},{"location":"chapter-4-resources/#scaling-the-same-object-by-factors-of-12-12-and-3-in-xx-yy-and-zz-respectively-s_12123s_12123","text":"","title":"Scaling\u00a0the same object by factors of 1/2, 1/2, and 3, in\u00a0xx,\u00a0yy, and\u00a0zz, respectively,\u00a0S_{1/2,1/2,3}S_{1/2,1/2,3}"},{"location":"chapter-4-resources/#reflecting-the-same-object-through-the-yzyz-plane-ff","text":"","title":"Reflecting\u00a0the same object through the\u00a0yzyz\u00a0plane,\u00a0FF"},{"location":"chapter-4-resources/#rotation-of-the-same-object-by-65circ-65circ-around-the-xx-axis-r_-65circ00r_-65circ00","text":"","title":"Rotation\u00a0of the same object by -65^\\circ-65^\\circ around the\u00a0xx\u00a0axis,\u00a0R_{-65^\\circ,0,0}R_{-65^\\circ,0,0}"},{"location":"chapter-4-resources/#rotation-of-the-same-object-by-45circ45circ-around-the-yy-axis-r_045circ0r_045circ0","text":"","title":"Rotation\u00a0of the same object by 45^\\circ45^\\circ around the\u00a0yy\u00a0axis,\u00a0R_{0,45^\\circ,0}R_{0,45^\\circ,0}"},{"location":"chapter-4-resources/#rotation-of-the-same-object-by-60circ60circ-around-the-zz-axis-r_0060circr_0060circ","text":"","title":"Rotation\u00a0of the same object by 60^\\circ60^\\circ around the\u00a0zz\u00a0axis,\u00a0R_{0,0,60^\\circ}R_{0,0,60^\\circ}"},{"location":"chapter-4-resources/#combination-of-several-transformations-applied-to-the-same-object-in-sequence-t_-200r_0060circs_131313t_-200r_0060circs_131313","text":"","title":"Combination\u00a0of several transformations applied to the same object in sequence, T_{-2,0,0}R_{0,0,60^\\circ}S_{1/3,1/3,1/3}T_{-2,0,0}R_{0,0,60^\\circ}S_{1/3,1/3,1/3}"},{"location":"chapter-5-resources/","text":"This page contains links to all resources mentioned in Chapter 5 of the textbook. Matrix Multiplication Visualized \u00b6 Kevin Cox of Bentley University created this interactive visualization of 4\\times4 4\\times4 matrix multiplication that goes hand-in-hand with the static diagrams in the textbook.","title":"Chapter 5. Matrices"},{"location":"chapter-5-resources/#matrix-multiplication-visualized","text":"Kevin Cox of Bentley University created this interactive visualization of 4\\times4 4\\times4 matrix multiplication that goes hand-in-hand with the static diagrams in the textbook.","title":"Matrix Multiplication Visualized"},{"location":"chapter-6-resources/","text":"This page contains links to all resources mentioned in Chapter 6 of the textbook. See the POV Break B page to download a copy of the right-handed basic scene template. Interactive Visualizations \u00b6 All created by Bentley University honors student Kevin Cox: The dot product of two vectors in two-dimensional space The equation of a plane in three-dimensional space The intersection of a line of sight with a plane in three-dimensional space Practice Problems \u00b6 I highly recommend the practice problems on dot products contained at the Learning Lesson website . A simple ray-tracer built in JavaScript \u00b6 This is useful for seeing how the concepts of this chapter (and all chapters in this part of the text) play out. Especially if you plan to follow the programming exercises in this portion of the text, which lead you through building a simple raytracer yourself, you may want to experiment with this one to see what kind of result you can expect to achieve at the end of the exercises in question.","title":"Chapter 6. Lines of Sight"},{"location":"chapter-6-resources/#interactive-visualizations","text":"All created by Bentley University honors student Kevin Cox: The dot product of two vectors in two-dimensional space The equation of a plane in three-dimensional space The intersection of a line of sight with a plane in three-dimensional space","title":"Interactive Visualizations"},{"location":"chapter-6-resources/#practice-problems","text":"I highly recommend the practice problems on dot products contained at the Learning Lesson website .","title":"Practice Problems"},{"location":"chapter-6-resources/#a-simple-ray-tracer-built-in-javascript","text":"This is useful for seeing how the concepts of this chapter (and all chapters in this part of the text) play out. Especially if you plan to follow the programming exercises in this portion of the text, which lead you through building a simple raytracer yourself, you may want to experiment with this one to see what kind of result you can expect to achieve at the end of the exercises in question.","title":"A simple ray-tracer built in JavaScript"},{"location":"chapter-7-resources/","text":"This page contains links to all resources mentioned in Chapter 7 of the textbook. In addition to the resources posted here, some resources from Chapter 6 remain relevant , especially the link to the JavaScript raytracer for the programming exercises. Interactive Visualization \u00b6 Created by Bentley University honors student Kevin Cox: The intersection of a line of sight with a sphere in three-dimensional space","title":"Chapter 7. Lines Intersecting Objects"},{"location":"chapter-7-resources/#interactive-visualization","text":"Created by Bentley University honors student Kevin Cox: The intersection of a line of sight with a sphere in three-dimensional space","title":"Interactive Visualization"},{"location":"chapter-8-resources/","text":"This page contains links to all resources mentioned in Chapter 8 of the textbook. Animated video of the first two figures from the chapter \u00b6 These videos were created in POV-Ray, and show that POV accurately combines lights and filters lights according to the additive and subtractive color models. Interactive color picker \u00b6 This excellent website lets you experiment with how changing any one of the components of an RGB or HSB color vector impacts all the components in the other color space. It also supports many other parameterizations of color space not discussed in the text. Also, some links from Chapter 6 remain relevant , especially the link to the JavaScript raytracer for the programming exercises.","title":"Chapter 8. Three Color Models"},{"location":"chapter-8-resources/#animated-video-of-the-first-two-figures-from-the-chapter","text":"These videos were created in POV-Ray, and show that POV accurately combines lights and filters lights according to the additive and subtractive color models.","title":"Animated video of the first two figures from the chapter"},{"location":"chapter-8-resources/#interactive-color-picker","text":"This excellent website lets you experiment with how changing any one of the components of an RGB or HSB color vector impacts all the components in the other color space. It also supports many other parameterizations of color space not discussed in the text. Also, some links from Chapter 6 remain relevant , especially the link to the JavaScript raytracer for the programming exercises.","title":"Interactive color picker"},{"location":"chapter-9-resources/","text":"This page contains links to all resources mentioned in Chapter 9 of the textbook. Spreadsheet Exercise \u00b6 Download here a copy of the spreadsheet mentioned in the exercises for this chapter. The download contains only the structure, with no formulas; the exercise asks you to fill in the formulas. Choose a format: The old Excel format (.xls) The new Excel format (.xlsx) . Other spreadsheet software (such as OpenOffice.org's Calc or Apple's Numbers.app ) should open at least one of those two formats. Also, some resources from Chapter 6 remain relevant , especially the link to the JavaScript raytracer for the programming exercises.","title":"Chapter 9. Lighting"},{"location":"chapter-9-resources/#spreadsheet-exercise","text":"Download here a copy of the spreadsheet mentioned in the exercises for this chapter. The download contains only the structure, with no formulas; the exercise asks you to fill in the formulas. Choose a format: The old Excel format (.xls) The new Excel format (.xlsx) . Other spreadsheet software (such as OpenOffice.org's Calc or Apple's Numbers.app ) should open at least one of those two formats. Also, some resources from Chapter 6 remain relevant , especially the link to the JavaScript raytracer for the programming exercises.","title":"Spreadsheet Exercise"},{"location":"errata/","text":"Errata \u00b6 This page lists known errors in the text, which will be fixed in future versions. Thanks to those who reported errors, especially Larry Riddle of Agnes Scott College, who did a very thorough proofreading and is responsible for most of this list. POV-Break A \u00b6 Page 31 \u00b6 The text incorrectly states that it is not possible to have the full power of the Insert menu from POV-Ray for Windows if you use POV-Ray for Mac. There is a method for getting access to that Insert menu, and it is now documented on the Software Packages page . Chapter 4 \u00b6 Page 95 \u00b6 Line 2: The word \"into\" is repeated twice. Exercise 4.37 says \"the while loop structure\" when it should say \"the for loop structure.\" Chapter 5 \u00b6 Page 127 \u00b6 The first sentence of Exercise 5.23 says \"any linear function,\" but it should say \"any affine transformation of the plane.\" This is not relevant until part (e). Page 156 \u00b6 Exercise 6.36 should not say \"rotates the object about an arbitrary line in space,\" but rather \"performs an ordinary POV rotation transformation centered on an arbitrary point in space.\" Then the example given makes more sense, and the exercise is less complex. POV Break C \u00b6 Page 159 \u00b6 The code block on this page is missing some curly brackets. The correct code block is shown here. union { sphere { <-0.5,0,0>, 0.25 } // forms the left end cap of the pill sphere { < 0.5,0,0>, 0.25 } // forms the right end cap of the pill cylinder { <-0.5,0,0>, <0.5,0,0>, 0.25 } // the middle section pigment { color Wheat } // a predefined color, almost White } Page 166 \u00b6 The code block on this page is missing some affine transformations of the Doorstop. The correct code block is shown here; only the first two lines of the difference block have been changed. #declare Cheese = difference { // Start with the doorstop defined earlier, repositioned: object { Doorstop scale 2.6 translate <-0.5,-0.35,1> } // Remove all of these objects to make holes: sphere { <0,-0.5,0>, 0.2 } sphere { <-0.75,-0.25,1.25>, 0.4 } sphere { <-0.8,-1,-0.3>, 0.3 } sphere { <-1.75,0.2,0.5>, 0.2 } sphere { <0.7,-1.1,1>, 0.3 } // Change its color to yellow: pigment { color BrightGold } } Chapter 7 \u00b6 Page 191 \u00b6 The first sentence of Exercise 7.14, as well as parts (a) and (b) should be referencing Exercise 7.13, not Exercise 7.10. Page 192 \u00b6 In order for Exercises 7.17 and 7.18 to be consistent, we should alter Exercise 7.17 as follows. In part (b), the cylinder endpoint (0,h,0) (0,h,0) should be (0,0,h) (0,0,h) . In part (e), the cone endpoint (0,h,0) (0,h,0) should be (0,0,h) (0,0,h) . Page 194 \u00b6 The cylinder in the center of Figure 7.16 has the wrong equations below it. They should read: x^2-z^2=\\frac12 x^2-z^2=\\frac12 x^2-z^2-\\frac12=0 x^2-z^2-\\frac12=0 x*x-z*z-0.5 Chapter 8 \u00b6 Page 209 \u00b6 In Exercise 8.10, parts (b) and (c) were written incorrectly. They should be replaced with the following. (b) To combine two RGB colors subtractively, first compute their CMY equivalents, combine them additively, and then convert the result back to an RGB vector. Redo each vector combination in Exercise 8.1, but this time use the procedure just described to combine them subtractively. (c) Create a formula (the analog of (8.1)) for the subtractive combination of two RGB color vectors \\langle r_1,g_1,b_1\\rangle \\langle r_1,g_1,b_1\\rangle and \\langle r_2,g_2,b_2\\rangle \\langle r_2,g_2,b_2\\rangle . Page 210 \u00b6 Exercise 8.13 should also contain this sentence: Assume in each case that \\langle h,1,1 \\rangle \\langle h,1,1 \\rangle corresponds to the RGB vector \\langle r,g,b \\rangle \\langle r,g,b \\rangle and write your answers in terms of r r , g g , b b , and p p . Chapter 10 \u00b6 Page 268 \u00b6 The equations above the graphs in Figure 10.7 should be y=h_2(x) y=h_2(x) (for the left graph) and y=h_3(x) y=h_3(x) (for the right graph). Page 297 \u00b6 In Exercise 10.26, the hint is given to use the #debug command. However, that command does not display its messages in the POV-Ray Messages window. So use the #warning command instead, which functions the same as #debug , but directs its messages to the POV-Ray Messages window, where you can see them. Chapter 11 \u00b6 Page 299 \u00b6 The code block in Exercise 11.26 erroneously uses the POV reserved word end as a variable. Another choice should have been made, such as stop : LinearPath(start,stop,rad) Chapter 12 \u00b6 Page 336 \u00b6 In Exercise 12.29, the formula b_{i,n}(t) b_{i,n}(t) should be written instead as b_{n,i}(t) b_{n,i}(t) , to be consistent with the notation in later chapters.","title":"Errata"},{"location":"errata/#errata","text":"This page lists known errors in the text, which will be fixed in future versions. Thanks to those who reported errors, especially Larry Riddle of Agnes Scott College, who did a very thorough proofreading and is responsible for most of this list.","title":"Errata"},{"location":"errata/#pov-break-a","text":"","title":"POV-Break A"},{"location":"errata/#page-31","text":"The text incorrectly states that it is not possible to have the full power of the Insert menu from POV-Ray for Windows if you use POV-Ray for Mac. There is a method for getting access to that Insert menu, and it is now documented on the Software Packages page .","title":"Page 31"},{"location":"errata/#chapter-4","text":"","title":"Chapter 4"},{"location":"errata/#page-95","text":"Line 2: The word \"into\" is repeated twice. Exercise 4.37 says \"the while loop structure\" when it should say \"the for loop structure.\"","title":"Page 95"},{"location":"errata/#chapter-5","text":"","title":"Chapter 5"},{"location":"errata/#page-127","text":"The first sentence of Exercise 5.23 says \"any linear function,\" but it should say \"any affine transformation of the plane.\" This is not relevant until part (e).","title":"Page 127"},{"location":"errata/#page-156","text":"Exercise 6.36 should not say \"rotates the object about an arbitrary line in space,\" but rather \"performs an ordinary POV rotation transformation centered on an arbitrary point in space.\" Then the example given makes more sense, and the exercise is less complex.","title":"Page 156"},{"location":"errata/#pov-break-c","text":"","title":"POV Break C"},{"location":"errata/#page-159","text":"The code block on this page is missing some curly brackets. The correct code block is shown here. union { sphere { <-0.5,0,0>, 0.25 } // forms the left end cap of the pill sphere { < 0.5,0,0>, 0.25 } // forms the right end cap of the pill cylinder { <-0.5,0,0>, <0.5,0,0>, 0.25 } // the middle section pigment { color Wheat } // a predefined color, almost White }","title":"Page 159"},{"location":"errata/#page-166","text":"The code block on this page is missing some affine transformations of the Doorstop. The correct code block is shown here; only the first two lines of the difference block have been changed. #declare Cheese = difference { // Start with the doorstop defined earlier, repositioned: object { Doorstop scale 2.6 translate <-0.5,-0.35,1> } // Remove all of these objects to make holes: sphere { <0,-0.5,0>, 0.2 } sphere { <-0.75,-0.25,1.25>, 0.4 } sphere { <-0.8,-1,-0.3>, 0.3 } sphere { <-1.75,0.2,0.5>, 0.2 } sphere { <0.7,-1.1,1>, 0.3 } // Change its color to yellow: pigment { color BrightGold } }","title":"Page 166"},{"location":"errata/#chapter-7","text":"","title":"Chapter 7"},{"location":"errata/#page-191","text":"The first sentence of Exercise 7.14, as well as parts (a) and (b) should be referencing Exercise 7.13, not Exercise 7.10.","title":"Page 191"},{"location":"errata/#page-192","text":"In order for Exercises 7.17 and 7.18 to be consistent, we should alter Exercise 7.17 as follows. In part (b), the cylinder endpoint (0,h,0) (0,h,0) should be (0,0,h) (0,0,h) . In part (e), the cone endpoint (0,h,0) (0,h,0) should be (0,0,h) (0,0,h) .","title":"Page 192"},{"location":"errata/#page-194","text":"The cylinder in the center of Figure 7.16 has the wrong equations below it. They should read: x^2-z^2=\\frac12 x^2-z^2=\\frac12 x^2-z^2-\\frac12=0 x^2-z^2-\\frac12=0 x*x-z*z-0.5","title":"Page 194"},{"location":"errata/#chapter-8","text":"","title":"Chapter 8"},{"location":"errata/#page-209","text":"In Exercise 8.10, parts (b) and (c) were written incorrectly. They should be replaced with the following. (b) To combine two RGB colors subtractively, first compute their CMY equivalents, combine them additively, and then convert the result back to an RGB vector. Redo each vector combination in Exercise 8.1, but this time use the procedure just described to combine them subtractively. (c) Create a formula (the analog of (8.1)) for the subtractive combination of two RGB color vectors \\langle r_1,g_1,b_1\\rangle \\langle r_1,g_1,b_1\\rangle and \\langle r_2,g_2,b_2\\rangle \\langle r_2,g_2,b_2\\rangle .","title":"Page 209"},{"location":"errata/#page-210","text":"Exercise 8.13 should also contain this sentence: Assume in each case that \\langle h,1,1 \\rangle \\langle h,1,1 \\rangle corresponds to the RGB vector \\langle r,g,b \\rangle \\langle r,g,b \\rangle and write your answers in terms of r r , g g , b b , and p p .","title":"Page 210"},{"location":"errata/#chapter-10","text":"","title":"Chapter 10"},{"location":"errata/#page-268","text":"The equations above the graphs in Figure 10.7 should be y=h_2(x) y=h_2(x) (for the left graph) and y=h_3(x) y=h_3(x) (for the right graph).","title":"Page 268"},{"location":"errata/#page-297","text":"In Exercise 10.26, the hint is given to use the #debug command. However, that command does not display its messages in the POV-Ray Messages window. So use the #warning command instead, which functions the same as #debug , but directs its messages to the POV-Ray Messages window, where you can see them.","title":"Page 297"},{"location":"errata/#chapter-11","text":"","title":"Chapter 11"},{"location":"errata/#page-299","text":"The code block in Exercise 11.26 erroneously uses the POV reserved word end as a variable. Another choice should have been made, such as stop : LinearPath(start,stop,rad)","title":"Page 299"},{"location":"errata/#chapter-12","text":"","title":"Chapter 12"},{"location":"errata/#page-336","text":"In Exercise 12.29, the formula b_{i,n}(t) b_{i,n}(t) should be written instead as b_{n,i}(t) b_{n,i}(t) , to be consistent with the notation in later chapters.","title":"Page 336"},{"location":"pov-break-a-resources/","text":"This page contains links to all resources mentioned in POV Break A of the textbook. Download POV-Ray \u00b6 See Software Packages to download the POV-Ray software. Project Information for Instructors \u00b6 I do not assign the introductory project in this POV Break to my own students, so there is no suggested grading criteria for it. All future POV Breaks' projects come with suggested grading criteria.","title":"POV Break A. Introduction to POV-Ray"},{"location":"pov-break-a-resources/#download-pov-ray","text":"See Software Packages to download the POV-Ray software.","title":"Download POV-Ray"},{"location":"pov-break-a-resources/#project-information-for-instructors","text":"I do not assign the introductory project in this POV Break to my own students, so there is no suggested grading criteria for it. All future POV Breaks' projects come with suggested grading criteria.","title":"Project Information for Instructors"},{"location":"pov-break-b-resources/","text":"This page contains links to all resources mentioned in POV Break B of the textbook. Right-handed Basic Scene \u00b6 Download here the .pov file of the basic scene converted to a right-handed coordinate system. Download basic-shapes.inc and my scene file \u00b6 Download the basic-shapes.inc file to use in your project. It provides the 15 shapes you'll arrange as part of this project. Download the scene file for my example of my own initials. Free graph paper online \u00b6 Tip I recommend using graph paper to plan your projects before you begin them. You can get free graph paper online here , among other places. Project Information for Instructors \u00b6 When my students do this project, I create a wiki page in our course management system (Blackboard) that contains instructions for how they can post their work to that wiki. All student posts go on one wiki page, and include both a rendered image and a download link to their original scene ( .pov ) file. Since this is the first project I assign, I use some in-class time to verify that everyone knows how to use the Blackboard wiki, and we look at one another's work if anyone is able to post right there in class. I require my students to name their .POV files (and the corresponding .PNG files) according to the filename convention Project-B-Your-Name-Here.POV (or .PNG ). For example, if I were doing the project, I would submit the files Project-B-Nathan-Carter.POV and Project-B-Nathan-Carter.PNG . Having a convention like this helps a lot when downloading 30 files of each type for grading. I use the following grading criteria. The portion for submission is as high as it is because this is their first time submitting a project, so I give credit for the fact that they must invest time in learning the wiki and submission process, which they will then use throughout the rest of the course without any additional credit for it. Completing and submitting a scene file that renders in POV (i.e., no errors if I run your file) 30% Submitting the corresponding image file 10% Correctly following directions for submission 20% Meeting the 3 criteria listed in the text 30% (10% each) Creativity and/or artistry 10% I include a creativity and/or artistry component to each project's grade, to encourage my students to enjoy the work, and to treat it as something more expressive than typical math homework, a chance to have fun while gaining mastery of the material. The creativity and/or artistry component may not always be 10%, but it is for this first project. Doing only the minimum required earns a 0% for that portion, while 10% for that portion means impressing me with going far above and beyond the minimum. And of course students can earn 1%-9% as well.","title":"POV Break B. Arranging a Scene"},{"location":"pov-break-b-resources/#right-handed-basic-scene","text":"Download here the .pov file of the basic scene converted to a right-handed coordinate system.","title":"Right-handed Basic Scene"},{"location":"pov-break-b-resources/#download-basic-shapesinc-and-my-scene-file","text":"Download the basic-shapes.inc file to use in your project. It provides the 15 shapes you'll arrange as part of this project. Download the scene file for my example of my own initials.","title":"Download basic-shapes.inc and my scene file"},{"location":"pov-break-b-resources/#free-graph-paper-online","text":"Tip I recommend using graph paper to plan your projects before you begin them. You can get free graph paper online here , among other places.","title":"Free graph paper online"},{"location":"pov-break-b-resources/#project-information-for-instructors","text":"When my students do this project, I create a wiki page in our course management system (Blackboard) that contains instructions for how they can post their work to that wiki. All student posts go on one wiki page, and include both a rendered image and a download link to their original scene ( .pov ) file. Since this is the first project I assign, I use some in-class time to verify that everyone knows how to use the Blackboard wiki, and we look at one another's work if anyone is able to post right there in class. I require my students to name their .POV files (and the corresponding .PNG files) according to the filename convention Project-B-Your-Name-Here.POV (or .PNG ). For example, if I were doing the project, I would submit the files Project-B-Nathan-Carter.POV and Project-B-Nathan-Carter.PNG . Having a convention like this helps a lot when downloading 30 files of each type for grading. I use the following grading criteria. The portion for submission is as high as it is because this is their first time submitting a project, so I give credit for the fact that they must invest time in learning the wiki and submission process, which they will then use throughout the rest of the course without any additional credit for it. Completing and submitting a scene file that renders in POV (i.e., no errors if I run your file) 30% Submitting the corresponding image file 10% Correctly following directions for submission 20% Meeting the 3 criteria listed in the text 30% (10% each) Creativity and/or artistry 10% I include a creativity and/or artistry component to each project's grade, to encourage my students to enjoy the work, and to treat it as something more expressive than typical math homework, a chance to have fun while gaining mastery of the material. The creativity and/or artistry component may not always be 10%, but it is for this first project. Doing only the minimum required earns a 0% for that portion, while 10% for that portion means impressing me with going far above and beyond the minimum. And of course students can earn 1%-9% as well.","title":"Project Information for Instructors"},{"location":"pov-break-c-resources/","text":"This page contains links to all resources mentioned in POV Break C of the textbook. Project Information for Instructors \u00b6 When my students do this project, I create a wiki page in our course management system (Blackboard) that contains instructions for how they can post their work to that wiki. I create one central page with the list of topics, and students claim a topic by editing that page and placing their name next to their chosen topic (first come, first served). They make the topic name a link to a new wiki page, and place all their writing there. I provide two example tutorials already written, as examples of the kind of work I expect. I usually create two such examples: a reference image showcasing all of the wood.inc and stones.inc textures, with instructions on how to import those include files and use them in your scene file a tutorial on how to simulate focal blur in POV, with example images I do not include those tutorials on this website, so that others who wish to assign those particular projects in other classes may do so. I also encourage my students to improve upon their first draft, by grading that draft and offering them two options. They can keep that grade and be done, which students who do a great job on the first draft often do. But as most of us know, writing is hard, and many people do not get the grade they want on their first draft. My grading of it provides specific suggestions for improvement, and those who choose to follow them can resubmit once, and I will update the grade according to how much of the suggestions they have implemented. I tell my students to write to a target audience of their classmates. Assume that a classmate may read your wiki page while working on a future project for our course, hoping to put to immediate use what you've written. Assume the reader has no POV knowledge beyond what you have, just what we've learned in our course so far. Read your work critically and ask yourself, \"If I read someone else's post and it looked like this, would I understand it? Would I be able to use it in a project? Is there anything missing, confusing, or inaccurate?\" I use the following grading criteria. Claiming a topic, creating a wiki page for it, and inserting any kind of content 25% Satisfying the requirement of including example work, images, and references 25% Correctly following directions for submission 10% Writing clearly for your target audience (If this is difficult for you, pair up with a friend and read and criticize each other's work. And remember, friends don't let friends submit confusing wiki pages.) 20% Ensuring your work makes it easy for someone to use the topic you chose 15% Creativity and/or artistry, or simply going beyond the call of duty 5% Again it is very easy to earn 60% by simply submitting information in the correct form, even if it is completely wrong and useless. That's generous of me, but of course 60% is not actually a passing grade. Warning The writing clearly portion of the assignment is not easy at all; I grade it harshly, especially since they have another opportunity to fix their mistakes and improve their grade. I suggest that they write once, then go back and revise several times, just as their Expository Writing 101 teachers taught. Writing about technical material is hard, and I encourage them to allocate time for doing this well, preferably over a period of several days, a little at a time. The creativity portion of this assignment is only 5% because this assignment has less room for creativity. I also include in that category doing extraordinary work, since this is a project on which it is quite possible to \"do more.\"","title":"POV Break C. Constructive solid geometry"},{"location":"pov-break-c-resources/#project-information-for-instructors","text":"When my students do this project, I create a wiki page in our course management system (Blackboard) that contains instructions for how they can post their work to that wiki. I create one central page with the list of topics, and students claim a topic by editing that page and placing their name next to their chosen topic (first come, first served). They make the topic name a link to a new wiki page, and place all their writing there. I provide two example tutorials already written, as examples of the kind of work I expect. I usually create two such examples: a reference image showcasing all of the wood.inc and stones.inc textures, with instructions on how to import those include files and use them in your scene file a tutorial on how to simulate focal blur in POV, with example images I do not include those tutorials on this website, so that others who wish to assign those particular projects in other classes may do so. I also encourage my students to improve upon their first draft, by grading that draft and offering them two options. They can keep that grade and be done, which students who do a great job on the first draft often do. But as most of us know, writing is hard, and many people do not get the grade they want on their first draft. My grading of it provides specific suggestions for improvement, and those who choose to follow them can resubmit once, and I will update the grade according to how much of the suggestions they have implemented. I tell my students to write to a target audience of their classmates. Assume that a classmate may read your wiki page while working on a future project for our course, hoping to put to immediate use what you've written. Assume the reader has no POV knowledge beyond what you have, just what we've learned in our course so far. Read your work critically and ask yourself, \"If I read someone else's post and it looked like this, would I understand it? Would I be able to use it in a project? Is there anything missing, confusing, or inaccurate?\" I use the following grading criteria. Claiming a topic, creating a wiki page for it, and inserting any kind of content 25% Satisfying the requirement of including example work, images, and references 25% Correctly following directions for submission 10% Writing clearly for your target audience (If this is difficult for you, pair up with a friend and read and criticize each other's work. And remember, friends don't let friends submit confusing wiki pages.) 20% Ensuring your work makes it easy for someone to use the topic you chose 15% Creativity and/or artistry, or simply going beyond the call of duty 5% Again it is very easy to earn 60% by simply submitting information in the correct form, even if it is completely wrong and useless. That's generous of me, but of course 60% is not actually a passing grade. Warning The writing clearly portion of the assignment is not easy at all; I grade it harshly, especially since they have another opportunity to fix their mistakes and improve their grade. I suggest that they write once, then go back and revise several times, just as their Expository Writing 101 teachers taught. Writing about technical material is hard, and I encourage them to allocate time for doing this well, preferably over a period of several days, a little at a time. The creativity portion of this assignment is only 5% because this assignment has less room for creativity. I also include in that category doing extraordinary work, since this is a project on which it is quite possible to \"do more.\"","title":"Project Information for Instructors"},{"location":"pov-break-d-resources/","text":"This page contains links to all resources mentioned in POV Break D of the textbook. Three Keys scene file \u00b6 Click to download the POV source code for the three keys scene. Tinker Toys files \u00b6 Click to download the INC file for the Tinker Toys example project, or download the POV file for the example Tinker Toys scene. Project Information for Instructors \u00b6 When my students do this project, I create a wiki page in our course management system (Blackboard) that contains instructions for how they can post their work to that wiki. I create one central page that is empty, and students claim a category and a set of objects within it by editing the central page and creating a section for their category, and putting a few objects within that section, attached to their name. It might look like the example shown below. They make their name and object list a link to a new wiki page, and place all their writing there. Furniture Coffee table, sofa, and bookcase \u2013 John Doe Lamp, dining room table, and ottoman \u2013 Jane Doe Toys A variety of Lego bricks \u2013 Juan Doe (etc.) Everyone is required to make different objects. Although more than one person can work within a category, they cannot make the same objects. Having the whole class share their material in a central location like this makes it possible, in later projects, for students to use not only the few objects they created in this project, but the many objects created by the entire class. In my experience, many final projects take advantage of this repository of objects. It's nice for a student to see their work picked up by someone else and used in a new context; they can see that their work was appreciated and useful. Here are example categories I provide to give people ideas and guide them into categories that are rather reusable. Furniture (chair, desk, lamp, bookshelf, etc.) Reusable because: Lots of indoor scenes can be made to look more realistic by adding some furniture. Houses (ranch, cape, mansion, high-rise apartment complex, castle, etc.) Reusable because:Lots of outdoor scenes can be made to look more realistic by putting several common outdoor objects like houses together in the background (or the foreground). Signs (road signs, billboards, green interstate direction signs, rest room signs, etc.) Reusable because:These can be used to decorate any scene in which they could realistically appear, and therefore add realism and detail. Tableware (plates, cups, spoons, bowls, glasses, napkins, etc.) Reusable because:Any still life scene could reasonably include objects like these. Food (fruit, bread, cookies, etc.) Reusable because:Same reason as previous Office supplies (book, stapler, phone, pen, picture frame, coffee cup, etc.) Reusable because:Same reason as previous Any particular brand of toys (e.g., one category is Lego TM blocks, another is Tinker Toys TM , another is Lincoln Logs TM , etc.) Reusable because: One could make an entire POV scene out of just one type of toy. The example I do for this project (which is already on the wiki) is done using Tinker Toys. Any other category you come up with, as longs as its objects are likely to be usable in future scenes. E.g., bad ideas include \"electric guitars\" and \"bunny slippers.\" Build something that you and/or your classmates may find useful in future projects. I use the following grading criteria. Appropriately staking your claim to three useful objects, thereby ensuring that you do not duplicate someone else's work 15% Creating three objects, and somewhere in your work using one of the concepts documented in the POV tutorials our class created in the project from POV Break C (You must state in your wiki post which tutorial concept you used.) 15% Including an image for each object you created 15% (5% each) Including all the necessary specifications for each object you created 15% (5% each) Including an example scene that uses your three objects together 10% Ensuring your submission is clear so that others can easily use your objects 10% Posting an .inc file that fits the requirements given in the text, and named after the pattern from the project in POV Break B (That is, Project-D-Nathan-Carter.INC, but with your name instead.) 10% Creativity and/or artistry, or simply going beyond the call of duty There is clearly room for creativity/artistry in this project, the first where you create original objects! 10%","title":"POV Break D. Reusable objects"},{"location":"pov-break-d-resources/#three-keys-scene-file","text":"Click to download the POV source code for the three keys scene.","title":"Three Keys scene file"},{"location":"pov-break-d-resources/#tinker-toys-files","text":"Click to download the INC file for the Tinker Toys example project, or download the POV file for the example Tinker Toys scene.","title":"Tinker Toys files"},{"location":"pov-break-d-resources/#project-information-for-instructors","text":"When my students do this project, I create a wiki page in our course management system (Blackboard) that contains instructions for how they can post their work to that wiki. I create one central page that is empty, and students claim a category and a set of objects within it by editing the central page and creating a section for their category, and putting a few objects within that section, attached to their name. It might look like the example shown below. They make their name and object list a link to a new wiki page, and place all their writing there. Furniture Coffee table, sofa, and bookcase \u2013 John Doe Lamp, dining room table, and ottoman \u2013 Jane Doe Toys A variety of Lego bricks \u2013 Juan Doe (etc.) Everyone is required to make different objects. Although more than one person can work within a category, they cannot make the same objects. Having the whole class share their material in a central location like this makes it possible, in later projects, for students to use not only the few objects they created in this project, but the many objects created by the entire class. In my experience, many final projects take advantage of this repository of objects. It's nice for a student to see their work picked up by someone else and used in a new context; they can see that their work was appreciated and useful. Here are example categories I provide to give people ideas and guide them into categories that are rather reusable. Furniture (chair, desk, lamp, bookshelf, etc.) Reusable because: Lots of indoor scenes can be made to look more realistic by adding some furniture. Houses (ranch, cape, mansion, high-rise apartment complex, castle, etc.) Reusable because:Lots of outdoor scenes can be made to look more realistic by putting several common outdoor objects like houses together in the background (or the foreground). Signs (road signs, billboards, green interstate direction signs, rest room signs, etc.) Reusable because:These can be used to decorate any scene in which they could realistically appear, and therefore add realism and detail. Tableware (plates, cups, spoons, bowls, glasses, napkins, etc.) Reusable because:Any still life scene could reasonably include objects like these. Food (fruit, bread, cookies, etc.) Reusable because:Same reason as previous Office supplies (book, stapler, phone, pen, picture frame, coffee cup, etc.) Reusable because:Same reason as previous Any particular brand of toys (e.g., one category is Lego TM blocks, another is Tinker Toys TM , another is Lincoln Logs TM , etc.) Reusable because: One could make an entire POV scene out of just one type of toy. The example I do for this project (which is already on the wiki) is done using Tinker Toys. Any other category you come up with, as longs as its objects are likely to be usable in future scenes. E.g., bad ideas include \"electric guitars\" and \"bunny slippers.\" Build something that you and/or your classmates may find useful in future projects. I use the following grading criteria. Appropriately staking your claim to three useful objects, thereby ensuring that you do not duplicate someone else's work 15% Creating three objects, and somewhere in your work using one of the concepts documented in the POV tutorials our class created in the project from POV Break C (You must state in your wiki post which tutorial concept you used.) 15% Including an image for each object you created 15% (5% each) Including all the necessary specifications for each object you created 15% (5% each) Including an example scene that uses your three objects together 10% Ensuring your submission is clear so that others can easily use your objects 10% Posting an .inc file that fits the requirements given in the text, and named after the pattern from the project in POV Break B (That is, Project-D-Nathan-Carter.INC, but with your name instead.) 10% Creativity and/or artistry, or simply going beyond the call of duty There is clearly room for creativity/artistry in this project, the first where you create original objects! 10%","title":"Project Information for Instructors"},{"location":"pov-break-e-resources/","text":"This page contains links to all resources mentioned in POV Break E of the textbook. VirtualDub for Windows \u00b6 This POV Break introduces the software VirtualDub for Windows, the download links and installation instructions for which appear on the Software Packages page of this site . Time Lapse Assembler for OS X \u00b6 This POV Break introduces the software Time Lapse Assembler for Mac OS X, the download links and installation instructions for which appear on the Software Packages page of this site . Alternately, if you already have QuickTime Pro (which is not free software) you can use it instead of Time Lapse Assembler, according to the directions on this web site . Convert images to JPEG Service for OS X \u00b6 If you use Time Lapse Assembler, still frames need to be in JPEG format. To quickly convert a set of images to that format, use the Mac OS X Service I provide on this website; download it here . Unzip it after downloading and double-click the resulting .workflow file. OS X will show you a prompt like the following one, asking if you want to install the service on your computer. You should choose Install, and thereafter you should find the service on the Services menu in Finder, when you have a set of image files selected. See POV Break E in the textbook for more information. 13 Example Animation Types Video \u00b6 This video showcases the 13 animation types covered in the text. Although the text includes still frames taken from some of these example animation types, the video obviously is a better representation, since it is animated, and it includes all 13 types rather than just a selection. Friedrich Lohm\u00fceller's Camera Animation Video \u00b6 View the video on Lohm\u00fceller's own site . Project information for Instructors \u00b6 Because this project works best if you use it as preparation for the movie project, I suggest that my students begin by choosing one or more objects that they plan to include in their movie project, and animating those same objects in this project also. They may need to create such objects if they don't already have access to them. This project is designed to be work they would mostly have to do as part of POV Break F 's project anyway. It can serve as a rough draft or initial concepts that will form part of that later movie project. I do not require that this project be connected to the movie project; students who are still uncertain about what their movie project will be may do this project on its own and figure that out later. When my students do this project, I require them to post the results to a wiki on our learning management system, Blackboard. I grade it out of 100% according to the following breakdown, which I share with students in advance. This project is easy and this breakdown is generous, which encourages them to do the work of forming these essential skills in preparation for the much harder project in POV Break F . Posting three AVI files 10% Doing so before the deadline 10% Ensuring the first AVI file is a valid, web-viewable POV movie 10% Ensuring the second AVI file is a valid, web-viewable POV movie 10% Ensuring the third AVI file is a valid, web-viewable POV movie 10% Having created at least one new object or piece of scenery 10% Ensuring that your first AVI file is one of the types of animation listed in POV Break E 10% Ensuring that your second AVI file is a different type of animation than the first 10% Ensuring that your third AVI file is a different type of animation than the first two 10% Doing something unique, creative, cool, or impressive 10%","title":"POV Break E. First animations"},{"location":"pov-break-e-resources/#virtualdub-for-windows","text":"This POV Break introduces the software VirtualDub for Windows, the download links and installation instructions for which appear on the Software Packages page of this site .","title":"VirtualDub for Windows"},{"location":"pov-break-e-resources/#time-lapse-assembler-for-os-x","text":"This POV Break introduces the software Time Lapse Assembler for Mac OS X, the download links and installation instructions for which appear on the Software Packages page of this site . Alternately, if you already have QuickTime Pro (which is not free software) you can use it instead of Time Lapse Assembler, according to the directions on this web site .","title":"Time Lapse Assembler for OS X"},{"location":"pov-break-e-resources/#convert-images-to-jpeg-service-for-os-x","text":"If you use Time Lapse Assembler, still frames need to be in JPEG format. To quickly convert a set of images to that format, use the Mac OS X Service I provide on this website; download it here . Unzip it after downloading and double-click the resulting .workflow file. OS X will show you a prompt like the following one, asking if you want to install the service on your computer. You should choose Install, and thereafter you should find the service on the Services menu in Finder, when you have a set of image files selected. See POV Break E in the textbook for more information.","title":"Convert images to JPEG Service for OS X"},{"location":"pov-break-e-resources/#13-example-animation-types-video","text":"This video showcases the 13 animation types covered in the text. Although the text includes still frames taken from some of these example animation types, the video obviously is a better representation, since it is animated, and it includes all 13 types rather than just a selection.","title":"13 Example Animation Types Video"},{"location":"pov-break-e-resources/#friedrich-lohmuellers-camera-animation-video","text":"View the video on Lohm\u00fceller's own site .","title":"Friedrich Lohm\u00fceller's Camera Animation Video"},{"location":"pov-break-e-resources/#project-information-for-instructors","text":"Because this project works best if you use it as preparation for the movie project, I suggest that my students begin by choosing one or more objects that they plan to include in their movie project, and animating those same objects in this project also. They may need to create such objects if they don't already have access to them. This project is designed to be work they would mostly have to do as part of POV Break F 's project anyway. It can serve as a rough draft or initial concepts that will form part of that later movie project. I do not require that this project be connected to the movie project; students who are still uncertain about what their movie project will be may do this project on its own and figure that out later. When my students do this project, I require them to post the results to a wiki on our learning management system, Blackboard. I grade it out of 100% according to the following breakdown, which I share with students in advance. This project is easy and this breakdown is generous, which encourages them to do the work of forming these essential skills in preparation for the much harder project in POV Break F . Posting three AVI files 10% Doing so before the deadline 10% Ensuring the first AVI file is a valid, web-viewable POV movie 10% Ensuring the second AVI file is a valid, web-viewable POV movie 10% Ensuring the third AVI file is a valid, web-viewable POV movie 10% Having created at least one new object or piece of scenery 10% Ensuring that your first AVI file is one of the types of animation listed in POV Break E 10% Ensuring that your second AVI file is a different type of animation than the first 10% Ensuring that your third AVI file is a different type of animation than the first two 10% Doing something unique, creative, cool, or impressive 10%","title":"Project information for Instructors"},{"location":"pov-break-f-resources/","text":"This page contains links to all resources mentioned in POV Break F of the textbook. B\u00e9zier curves in POV \u00b6 Also, you can download bezier.inc to add B\u00e9zier curve capabilities to your POV files. Instructions for using it appear in the comments in a demo file; download bezier-demo.pov to see. Movie Editing Software and Tutorials \u00b6 As of early 2018, Microsoft no longer has a page for downloading Windows Movie Maker. This represents a change from the textbook, which was published in 2016, before this change was made. Consequently, I recommend that Windows users download the cross-platform, free, open-source tool OpenShot that the text recommends for Linux users. Since the publication of the textbook, that produce has matured significantly and become available for both Windows and Mac systems as well. Macs come with iMovie already installed, but if you want a newer version than the one you have, you can update through the Mac App Store . Tutorials for iMovie are available on Apple's website here and here . Mac users are also free to try OpenShot, as mentioned above. Linux users can get OpenShot from its webpage . Tutorials for OpenShot appear on Linux.com and on MediaCollege.com (an OpenShot sponsor). Information for Instructors \u00b6 Instead of a final exam, my students do a final project, and we show them to one another during the regularly scheduled final exam period. So although we all show up on the day of the \"final exam,\" there is no traditional exam, but instead there are informal presentations of final projects (and voting for a People's Choice award). The final project is 15% of our course grade, and the breakdown for grading the final project is given below. On the day that we show our movies, during the ordinarily-scheduled final exam period, after all the movies have been seen, we take a vote for the People's Choice award. Each student lists their top 3 favorite movies (and they are free to list their own) in decreasing order of preference. I later compile the votes, giving #1 votes more credit than #2 votes, and #2 more than #3, and rank movies based on their votes. This popularity vote is 10% of the project grade, as you can see below, which encourages creativity, polish, extra effort, etc. My students may work on the final project individually or in pairs. Each project receives one grade, which everyone who worked on the project earns. I encourage students to talk with classmates and me about their work on this project, and consult any other kind of resource they see fit. But of course, no team should present anyone else's work as their own, in keeping with the usual academic integrity standards. Tip I set aside a few class periods near the end of the semester for discussing these projects in class. I let the class choose what we should discuss during those periods, and usually they end up being workshops, in the sense that they are times when teams of two meet and work together in class, while I move among them and answer individual questions about difficulties with a specific detail of a scene, an object, an animation, etc. I also place the following restrictions on my students' work. Each movie must use at least one of the POV features listed in the suggested project at the end of POV Break C. If a student/team chooses to include code written by others in their movie, they must follow these important guidelines. Give credit where credit is due. (Cite whatever you use.) Ensure that at least one significant foreground object and some of the background were created by the student/team, so that the project involves more than just animating other people's stuff. No imported code can count towards any of the other project requirements. For example, if the student/team imports someone else's really cool model of a human hand made with POV's blob feature, that doesn't count as satisfying the POV Break C requirement, because the use of the blob feature was not done by the student/team. The movie must have a title screen that includes the name(s) of the student/team at the opening of the movie. This makes it easy for me to compile a YouTube playlist of all the final projects, and each project automatically introduces itself. Each student/team must give a presentation on the day we share our movies with one another, during the regularly-scheduled final exam period. I ask that the outline of each presentation be as follows. Students submit their presentation file electronically as described further below. Describe how you planned your project. Feel free to show sketches, early still scenes, or a story outline. Describe how you divided the work (chronologically, and across team members, if applicable) and which parts were the most time consuming or difficult. Mention which POV feature(s) you used from the suggested project in POV Break C. Show a frame from your movie illustrating the feature in question. Mention where you used B\u00e9zier curves in your scene. Illustrate it with a frame from your movie, or a sketch, or whatever you think is most helpful. Conclude by showing your movie, and let it speak for itself. Each movie must be submitted as follows. Upload the video to YouTube and email me the link to the video. If you do not want it to be publicly visible, you make make it unlisted, but it cannot be private, or I will not be able to view it. Attach to that email a copy of the presentation you will give to introduce your movie. The reason for this is given below. Your presentation's last slide should be a link to your YouTube video, so that you can just click the link to jump right there. When presenting, try to show it full-screen, for the best audience experience. Warning I require that this email arrive one hour (or more) before the final exam period, so that I am able to put all presentation files onto the classroom podium PC before the final exam period begins. (It wastes too much time if every single team inserts a pen drive and drags a presentation onto the podium PC before presenting. If I ensure that all presentations are in one folder on the desktop ready to go, everything goes more smoothly and is less boring for the audience.) I also construct a YouTube playlist containing all final projects and email it to the class after the presentations, so that everyone can rewatch them at their leisure. The final project grading sheet you can view by clicking here (PDF) shows in detail the grading breakdown that I use for this project. The 10% marked \"People's Choice\" will be awarded based on votes given by each student on presentation day, as described above. It is essential to attend that day of class, so that each student/team can give their presentation, receive votes, and vote for others.","title":"POV Break F. Your movie"},{"location":"pov-break-f-resources/#bezier-curves-in-pov","text":"Also, you can download bezier.inc to add B\u00e9zier curve capabilities to your POV files. Instructions for using it appear in the comments in a demo file; download bezier-demo.pov to see.","title":"B\u00e9zier curves in POV"},{"location":"pov-break-f-resources/#movie-editing-software-and-tutorials","text":"As of early 2018, Microsoft no longer has a page for downloading Windows Movie Maker. This represents a change from the textbook, which was published in 2016, before this change was made. Consequently, I recommend that Windows users download the cross-platform, free, open-source tool OpenShot that the text recommends for Linux users. Since the publication of the textbook, that produce has matured significantly and become available for both Windows and Mac systems as well. Macs come with iMovie already installed, but if you want a newer version than the one you have, you can update through the Mac App Store . Tutorials for iMovie are available on Apple's website here and here . Mac users are also free to try OpenShot, as mentioned above. Linux users can get OpenShot from its webpage . Tutorials for OpenShot appear on Linux.com and on MediaCollege.com (an OpenShot sponsor).","title":"Movie Editing Software and Tutorials"},{"location":"pov-break-f-resources/#information-for-instructors","text":"Instead of a final exam, my students do a final project, and we show them to one another during the regularly scheduled final exam period. So although we all show up on the day of the \"final exam,\" there is no traditional exam, but instead there are informal presentations of final projects (and voting for a People's Choice award). The final project is 15% of our course grade, and the breakdown for grading the final project is given below. On the day that we show our movies, during the ordinarily-scheduled final exam period, after all the movies have been seen, we take a vote for the People's Choice award. Each student lists their top 3 favorite movies (and they are free to list their own) in decreasing order of preference. I later compile the votes, giving #1 votes more credit than #2 votes, and #2 more than #3, and rank movies based on their votes. This popularity vote is 10% of the project grade, as you can see below, which encourages creativity, polish, extra effort, etc. My students may work on the final project individually or in pairs. Each project receives one grade, which everyone who worked on the project earns. I encourage students to talk with classmates and me about their work on this project, and consult any other kind of resource they see fit. But of course, no team should present anyone else's work as their own, in keeping with the usual academic integrity standards. Tip I set aside a few class periods near the end of the semester for discussing these projects in class. I let the class choose what we should discuss during those periods, and usually they end up being workshops, in the sense that they are times when teams of two meet and work together in class, while I move among them and answer individual questions about difficulties with a specific detail of a scene, an object, an animation, etc. I also place the following restrictions on my students' work. Each movie must use at least one of the POV features listed in the suggested project at the end of POV Break C. If a student/team chooses to include code written by others in their movie, they must follow these important guidelines. Give credit where credit is due. (Cite whatever you use.) Ensure that at least one significant foreground object and some of the background were created by the student/team, so that the project involves more than just animating other people's stuff. No imported code can count towards any of the other project requirements. For example, if the student/team imports someone else's really cool model of a human hand made with POV's blob feature, that doesn't count as satisfying the POV Break C requirement, because the use of the blob feature was not done by the student/team. The movie must have a title screen that includes the name(s) of the student/team at the opening of the movie. This makes it easy for me to compile a YouTube playlist of all the final projects, and each project automatically introduces itself. Each student/team must give a presentation on the day we share our movies with one another, during the regularly-scheduled final exam period. I ask that the outline of each presentation be as follows. Students submit their presentation file electronically as described further below. Describe how you planned your project. Feel free to show sketches, early still scenes, or a story outline. Describe how you divided the work (chronologically, and across team members, if applicable) and which parts were the most time consuming or difficult. Mention which POV feature(s) you used from the suggested project in POV Break C. Show a frame from your movie illustrating the feature in question. Mention where you used B\u00e9zier curves in your scene. Illustrate it with a frame from your movie, or a sketch, or whatever you think is most helpful. Conclude by showing your movie, and let it speak for itself. Each movie must be submitted as follows. Upload the video to YouTube and email me the link to the video. If you do not want it to be publicly visible, you make make it unlisted, but it cannot be private, or I will not be able to view it. Attach to that email a copy of the presentation you will give to introduce your movie. The reason for this is given below. Your presentation's last slide should be a link to your YouTube video, so that you can just click the link to jump right there. When presenting, try to show it full-screen, for the best audience experience. Warning I require that this email arrive one hour (or more) before the final exam period, so that I am able to put all presentation files onto the classroom podium PC before the final exam period begins. (It wastes too much time if every single team inserts a pen drive and drags a presentation onto the podium PC before presenting. If I ensure that all presentations are in one folder on the desktop ready to go, everything goes more smoothly and is less boring for the audience.) I also construct a YouTube playlist containing all final projects and email it to the class after the presentations, so that everyone can rewatch them at their leisure. The final project grading sheet you can view by clicking here (PDF) shows in detail the grading breakdown that I use for this project. The 10% marked \"People's Choice\" will be awarded based on votes given by each student on presentation day, as described above. It is essential to attend that day of class, so that each student/team can give their presentation, receive votes, and vote for others.","title":"Information for Instructors"},{"location":"pov-break-g-resources/","text":"This page contains links to all resources mentioned in POV Break G of the textbook. Suggested code structure \u00b6 The following code appears in the textbook, but is included here as well for easier copying and pasting into your own .pov scene files. // Declare the 16 points of the control net. \ufffc\ufffc\ufffc\ufffc\ufffc\ufffc\ufffc #declare C11 = < 0 , 0 , 0 >; #declare C12 = < 0 , 0 , 1 >; #declare C13 = < 0 , 0 , 2 >; #declare C14 = < 0 , 0 , 3 >; #declare C21 = < 1 , 0 , 0 >; #declare C22 = < 1 , 0 , 1 >; #declare C23 = < 1 , 0 , 2 >; #declare C24 = < 1 , 0 , 3 >; #declare C31 = < 2 , 0 , 0 >; #declare C32 = < 2 , 0 , 1 >; #declare C33 = < 2 , 0 , 2 >; #declare C34 = < 2 , 0 , 3 >; #declare C41 = < 3 , 0 , 0 >; #declare C42 = < 3 , 0 , 1 >; #declare C43 = < 3 , 0 , 2 >; #declare C44 = < 3 , 0 , 3 >; // Use them to create the surface. bicubic_patch { type 1 flatness 0 u_steps 5 v_steps 5 C11 C12 C13 C14 C21 C22 C23 C24 C31 C32 C33 C34 C41 C42 C43 C44 pigment { color Blue } }; // Use them to show the control net. union { sphere { C11 , 0.1 } sphere { C12 , 0.1 } sphere { C13 , 0.1 } sphere { C14 , 0.1 } sphere { C21 , 0.1 } sphere { C22 , 0.1 } sphere { C23 , 0.1 } sphere { C24 , 0.1 } sphere { C31 , 0.1 } sphere { C32 , 0.1 } sphere { C33 , 0.1 } sphere { C34 , 0.1 } sphere { C41 , 0.1 } sphere { C42 , 0.1 } sphere { C43 , 0.1 } sphere { C44 , 0.1 } cylinder { C11 , C12 , 0.03 } cylinder { C12 , C13 , 0.03 } cylinder { C13 , C14 , 0.03 } cylinder { C21 , C22 , 0.03 } cylinder { C22 , C23 , 0.03 } cylinder { C23 , C24 , 0.03 } cylinder { C31 , C32 , 0.03 } cylinder { C32 , C33 , 0.03 } cylinder { C33 , C34 , 0.03 } cylinder { C41 , C42 , 0.03 } cylinder { C42 , C43 , 0.03 } cylinder { C43 , C44 , 0.03 } cylinder { C11 , C21 , 0.03 } cylinder { C21 , C31 , 0.03 } cylinder { C31 , C41 , 0.03 } cylinder { C12 , C22 , 0.03 } cylinder { C22 , C32 , 0.03 } cylinder { C32 , C42 , 0.03 } cylinder { C13 , C23 , 0.03 } cylinder { C23 , C33 , 0.03 } cylinder { C33 , C43 , 0.03 } cylinder { C14 , C24 , 0.03 } cylinder { C24 , C34 , 0.03 } cylinder { C34 , C44 , 0.03 } pigment { color Green } } Animations \u00b6","title":"POV Break G. Advanced modeling"},{"location":"pov-break-g-resources/#suggested-code-structure","text":"The following code appears in the textbook, but is included here as well for easier copying and pasting into your own .pov scene files. // Declare the 16 points of the control net. \ufffc\ufffc\ufffc\ufffc\ufffc\ufffc\ufffc #declare C11 = < 0 , 0 , 0 >; #declare C12 = < 0 , 0 , 1 >; #declare C13 = < 0 , 0 , 2 >; #declare C14 = < 0 , 0 , 3 >; #declare C21 = < 1 , 0 , 0 >; #declare C22 = < 1 , 0 , 1 >; #declare C23 = < 1 , 0 , 2 >; #declare C24 = < 1 , 0 , 3 >; #declare C31 = < 2 , 0 , 0 >; #declare C32 = < 2 , 0 , 1 >; #declare C33 = < 2 , 0 , 2 >; #declare C34 = < 2 , 0 , 3 >; #declare C41 = < 3 , 0 , 0 >; #declare C42 = < 3 , 0 , 1 >; #declare C43 = < 3 , 0 , 2 >; #declare C44 = < 3 , 0 , 3 >; // Use them to create the surface. bicubic_patch { type 1 flatness 0 u_steps 5 v_steps 5 C11 C12 C13 C14 C21 C22 C23 C24 C31 C32 C33 C34 C41 C42 C43 C44 pigment { color Blue } }; // Use them to show the control net. union { sphere { C11 , 0.1 } sphere { C12 , 0.1 } sphere { C13 , 0.1 } sphere { C14 , 0.1 } sphere { C21 , 0.1 } sphere { C22 , 0.1 } sphere { C23 , 0.1 } sphere { C24 , 0.1 } sphere { C31 , 0.1 } sphere { C32 , 0.1 } sphere { C33 , 0.1 } sphere { C34 , 0.1 } sphere { C41 , 0.1 } sphere { C42 , 0.1 } sphere { C43 , 0.1 } sphere { C44 , 0.1 } cylinder { C11 , C12 , 0.03 } cylinder { C12 , C13 , 0.03 } cylinder { C13 , C14 , 0.03 } cylinder { C21 , C22 , 0.03 } cylinder { C22 , C23 , 0.03 } cylinder { C23 , C24 , 0.03 } cylinder { C31 , C32 , 0.03 } cylinder { C32 , C33 , 0.03 } cylinder { C33 , C34 , 0.03 } cylinder { C41 , C42 , 0.03 } cylinder { C42 , C43 , 0.03 } cylinder { C43 , C44 , 0.03 } cylinder { C11 , C21 , 0.03 } cylinder { C21 , C31 , 0.03 } cylinder { C31 , C41 , 0.03 } cylinder { C12 , C22 , 0.03 } cylinder { C22 , C32 , 0.03 } cylinder { C32 , C42 , 0.03 } cylinder { C13 , C23 , 0.03 } cylinder { C23 , C33 , 0.03 } cylinder { C33 , C43 , 0.03 } cylinder { C14 , C24 , 0.03 } cylinder { C24 , C34 , 0.03 } cylinder { C34 , C44 , 0.03 } pigment { color Green } }","title":"Suggested code structure"},{"location":"pov-break-g-resources/#animations","text":"","title":"Animations"},{"location":"software-packages/","text":"POV-Ray \u00b6 The Persistence of Vision Raytracer can be obtained from its website . Or you can click this direct link to the installer for Microsoft Windows , on the download page from that same site. Instructions for installing and using the software are provided in the textbook itself. Note The textbook recommends that Mac users install the Windows version in a virtual machine, or using Wine. But if you prefer a native user interface, even if it doesn't match the texbook's content, see the Unofficial POV-Ray GUI for Mac . Mac users may find it easier to get started with a copy of the Basic Scene 01 from the Windows version of POV-Ray. Warning For Mac users: The text claims that the Mac version is inferior to the Windows version because the Windows version has a powerful Insert menu with many ready-made shapes and scenes available for easy construction of scenes and objects. But a helpful reader informed me that POV-Ray Unofficial 3.7.0.x for Mac contains the Insert menu, if you set your preferences correctly. (Thanks, Matthias!) Do so as follows: Launch the POV-Ray Unofficial 3.7.0.x application. Click the POV-Ray menu and choose Preferences. In the Editor tab, click the Insert Folder button as shown here. Navigate to the /Applications folder, and then into the POV-Ray Unofficial 3.7.0.x folder, and then into the Insert Menu folder. Click Open. Click Ok to save your preferences. The Insert menu should then be visible. However, content you insert into your scenes using that menu may depend on .inc files that POV needs to be able to locate. Thus you must also modify your render settings as follows. Ensure the Render Settings window is visible (see the Window menu, Render settings). In the \"Files & Paths\" section, notice the section on search paths for include files, highlighted in the following screenshot. Click the Select button to choose an include path. Navigate to the /Applications folder, and then into the POV-Ray Unofficial 3.7.0.x folder, and then into the include folder. Click Open. Then any file you create using content from the Insert menu should render successfully. VirtualDub for Windows \u00b6 This software package creates videos from sequences of still frames created in POV-Ray. You can visit its website , or go directly to downloading a version for your Windows computer . Instructions for installing the software appear below; instructions for using it are provided in the textbook itself. Download the software using one of the links above. Open the file you download, which is a .zip archive. In the window that opens, click the button labeled \"Extract all files,\" as shown in the screenshot below. Choose any folder on your hard drive where you wish to keep this program. One sensible place is to put it is in the same folder on your hard drive where you keep all your POV files. Tip You do not need to download or install the software more than once; this is a one-time-only procedure. To run the program (now or at any future time) use Windows Explorer to navigate to the folder you chose and double-click the file VirtualDub.exe . To make a shortcut for VirtualDub on your desktop, right-click the .exe file and choose \"Copy,\" then right-click on your desktop and choose to paste a shortcut. Time Lapse Assembler for Mac OS X \u00b6 Download and install this application as follows. First download the application from the developer's website . It downloads as a disk image ( .dmg ) file, which your system probably placed in your Downloads folder. Find that file and double-click it to mount and open it in Finder. This will show you the contents of the disk image, which is just the app itself and a link to your Applications folder, as shown in the screenshot below. Click and drag the application into your Applications folder. This installs the app on your system. You can then close the disk image window, find the disk image on your desktop, and drag it to the Trash to unmount it. Tip You need to follow this installation procedure only once. Now that the software is installed on your computer, to launch it, simply navigate to your Applications folder (which appears in the Dock, for many users) and double-click Time Lapse Assembler. Mac users will need to ensure that all frames of an animation are in JPEG format. To do so, see the Mac OS X Service I provide for that purpose, which you can download from the \"first animations\" page . ffmpeg for Linux \u00b6 Visit the ffmpeg website and follow the download and installation instructions for binaries for your type of Linux distribution.","title":"Software Packages"},{"location":"software-packages/#pov-ray","text":"The Persistence of Vision Raytracer can be obtained from its website . Or you can click this direct link to the installer for Microsoft Windows , on the download page from that same site. Instructions for installing and using the software are provided in the textbook itself. Note The textbook recommends that Mac users install the Windows version in a virtual machine, or using Wine. But if you prefer a native user interface, even if it doesn't match the texbook's content, see the Unofficial POV-Ray GUI for Mac . Mac users may find it easier to get started with a copy of the Basic Scene 01 from the Windows version of POV-Ray. Warning For Mac users: The text claims that the Mac version is inferior to the Windows version because the Windows version has a powerful Insert menu with many ready-made shapes and scenes available for easy construction of scenes and objects. But a helpful reader informed me that POV-Ray Unofficial 3.7.0.x for Mac contains the Insert menu, if you set your preferences correctly. (Thanks, Matthias!) Do so as follows: Launch the POV-Ray Unofficial 3.7.0.x application. Click the POV-Ray menu and choose Preferences. In the Editor tab, click the Insert Folder button as shown here. Navigate to the /Applications folder, and then into the POV-Ray Unofficial 3.7.0.x folder, and then into the Insert Menu folder. Click Open. Click Ok to save your preferences. The Insert menu should then be visible. However, content you insert into your scenes using that menu may depend on .inc files that POV needs to be able to locate. Thus you must also modify your render settings as follows. Ensure the Render Settings window is visible (see the Window menu, Render settings). In the \"Files & Paths\" section, notice the section on search paths for include files, highlighted in the following screenshot. Click the Select button to choose an include path. Navigate to the /Applications folder, and then into the POV-Ray Unofficial 3.7.0.x folder, and then into the include folder. Click Open. Then any file you create using content from the Insert menu should render successfully.","title":"POV-Ray"},{"location":"software-packages/#virtualdub-for-windows","text":"This software package creates videos from sequences of still frames created in POV-Ray. You can visit its website , or go directly to downloading a version for your Windows computer . Instructions for installing the software appear below; instructions for using it are provided in the textbook itself. Download the software using one of the links above. Open the file you download, which is a .zip archive. In the window that opens, click the button labeled \"Extract all files,\" as shown in the screenshot below. Choose any folder on your hard drive where you wish to keep this program. One sensible place is to put it is in the same folder on your hard drive where you keep all your POV files. Tip You do not need to download or install the software more than once; this is a one-time-only procedure. To run the program (now or at any future time) use Windows Explorer to navigate to the folder you chose and double-click the file VirtualDub.exe . To make a shortcut for VirtualDub on your desktop, right-click the .exe file and choose \"Copy,\" then right-click on your desktop and choose to paste a shortcut.","title":"VirtualDub for Windows"},{"location":"software-packages/#time-lapse-assembler-for-mac-os-x","text":"Download and install this application as follows. First download the application from the developer's website . It downloads as a disk image ( .dmg ) file, which your system probably placed in your Downloads folder. Find that file and double-click it to mount and open it in Finder. This will show you the contents of the disk image, which is just the app itself and a link to your Applications folder, as shown in the screenshot below. Click and drag the application into your Applications folder. This installs the app on your system. You can then close the disk image window, find the disk image on your desktop, and drag it to the Trash to unmount it. Tip You need to follow this installation procedure only once. Now that the software is installed on your computer, to launch it, simply navigate to your Applications folder (which appears in the Dock, for many users) and double-click Time Lapse Assembler. Mac users will need to ensure that all frames of an animation are in JPEG format. To do so, see the Mac OS X Service I provide for that purpose, which you can download from the \"first animations\" page .","title":"Time Lapse Assembler for Mac OS X"},{"location":"software-packages/#ffmpeg-for-linux","text":"Visit the ffmpeg website and follow the download and installation instructions for binaries for your type of Linux distribution.","title":"ffmpeg for Linux"}]}